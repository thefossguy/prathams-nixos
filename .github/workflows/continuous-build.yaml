name: Continuous Build
run-name: Continuous Build

on:
  workflow_dispatch:
    branches:
      - master
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron: '30 5 * * *' # Everyday, at 00:00 IST

env:
  NIXPKGS_RISCV_GHC_BOOTSTRAP_ISSUE: https://github.com/nixos/nixpkgs/issues/231537

jobs:
  nix-flake-update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: DeterminateSystems/nix-installer-action@main

      - name: Updating the flake lockfile
        run: |
          nix flake update

  iso:
    runs-on: ubuntu-latest
    needs: nix-flake-update
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        linux_arches: [ aarch64, riscv64, x86_64 ]

    steps:
      - uses: actions/checkout@main
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: "extra-platforms = aarch64-linux riscv64-linux x86_64-linux"
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Setting up QEMU
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y binfmt-support qemu-user-static

      - name: Building NixOS ISO for ${{ matrix.linux_arches }}
        run: |
          if [[ '${{ matrix.linux_arches }}' != 'riscv64' ]]; then
              NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1 nix build --impure --print-build-logs --show-trace .#isos.${{ matrix.linux_arches }}
          else
              echo "RISC-V job for ${{ github.job }} skipped until $NIXPKGS_RISCV_GHC_BOOTSTRAP_ISSUE is resolved."
          fi

  nixos:
    runs-on: ubuntu-latest
    needs: nix-flake-update
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        machines: [ flameboi, sentinel, reddish, mahadev, pawandev, stuti, vaaman, vaayu ]

    steps:
      - uses: actions/checkout@main
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: "extra-platforms = aarch64-linux riscv64-linux x86_64-linux"
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Setting up QEMU
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y binfmt-support qemu-user-static

      - name: Building NixOS configuration for ${{ matrix.machines }}
        run: |
          if [[ "$(nix eval --raw .#nixosConfigurations.${{ matrix.machines }}.pkgs.stdenv.system)" != 'riscv64-linux' ]]; then
              NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1 nix build --impure --print-build-logs --show-trace .#machines.${{ matrix.machines }}
          else
              echo "RISC-V job for ${{ github.job }} skipped until $NIXPKGS_RISCV_GHC_BOOTSTRAP_ISSUE is resolved."
          fi

  hm-linux:
    runs-on: ubuntu-latest
    needs: nix-flake-update
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        linux_arches: [ aarch64, riscv64, x86_64 ]
        homeOf: [ pratham ]

    steps:
      - uses: actions/checkout@main
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: "extra-platforms = aarch64-linux riscv64-linux x86_64-linux"
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Setting up QEMU
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y binfmt-support qemu-user-static

      - name: Building home-manager configuration for ${{ matrix.homeOf }}
        run: |
          if [[ '${{ matrix.linux_arches }}' != 'riscv64' ]]; then
              NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1 nix build --impure --print-build-logs --show-trace .#homeOf.${{ matrix.linux_arches }}-linux.${{ matrix.homeOf }}
          else
              echo "RISC-V job for ${{ github.job }} skipped until $NIXPKGS_RISCV_GHC_BOOTSTRAP_ISSUE is resolved."
          fi

  hm-darwin:
    runs-on: macos-latest
    needs: nix-flake-update
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        homeOf: [ pratham ]

    steps:
      - uses: actions/checkout@main
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Building home-manager configuration for ${{ matrix.homeOf }}
        run: |
          if [[ "$(uname -m)" == 'x86_64' ]]; then
              system_attr='x86_64-darwin'
          elif [[ "$(uname -m)" == 'arm64' ]]; then
              system_attr='aarch64-darwin'
          else
              echo "well well well, look what we have... Darwin on $(uname -m)"
              exit 1
          fi
          nix build --print-build-logs --show-trace .#homeOf."${system_attr}".${{ matrix.homeOf }}
