{ lib, pkgs, ... }:

let
  NixOSRelease = "23.11";
  home-manager = builtins.fetchTarball "https://github.com/nix-community/home-manager/archive/release-${NixOSRelease}.tar.gz";
  prathamsHome = "/home/pratham";
  scriptsDir = "${prathamsHome}/.local/scripts";

  sudoRules = with pkgs; [
    { package = coreutils; command = "sync"; }
    { package = hdparm; command = "hdparm"; }
    { package = nix; command = "nix-collect-garbage"; }
    { package = nixos-rebuild; command = "nixos-rebuild"; }
    { package = nvme-cli; command = "nvme"; }
    { package = systemd; command = "poweroff"; }
    { package = systemd; command = "reboot"; }
    { package = systemd; command = "shutdown"; }
    { package = systemd; command = "systemctl"; }
    { package = util-linux; command = "dmesg"; }
  ];

  mkSudoRule = rule: {
    command = "${rule.package}/bin/${rule.command}";
    options = [ "NOPASSWD" ];
  };

  sudoCommands = map mkSudoRule sudoRules;

  whatIGetForSupportingTheRaspberryPiFoundation = pkgs.writeShellScriptBin "populate-boot-for-raspberry-pi" ''
    set -xe

    if grep 'Raspberry Pi' /proc/device-tree/model > /dev/null; then
        cp "${pkgs.ubootRaspberryPi4_64bit}/u-boot.bin" /boot
        cp -r "${pkgs.raspberrypifw}/share/raspberrypi/boot/"* /boot
        cat << EOF > /boot/config.txt
        enable_uart=1
        avoid_warnings=1
        arm_64bit=1
        kernel=u-boot.bin
        [pi4]
        #hdmi_enable_4kp60=1
        arm_boost=1
    fi
  '';

  OVMFBinName = if pkgs.stdenv.isAarch64 then "AAVMF"
    else (
      if pkgs.stdenv.isx86_64 then "OVMF"
      else ""
    );
in

{
  imports = [
    ./host-specific-configuration.nix # specific to this host
    (import "${home-manager}/nixos") # aye, home-manager
    ./hardware-configuration.nix # generated by 'nixos-generate-config'
  ];

  # {{ packages section }}
  nixpkgs.config.allowUnfree = true; # allow non-FOSS pkgs

  # {{ user configuration }}

  # {{ home-manager configuration }}
  # call the home-manager configuration directly
  # without having to depend on a $HOME/.config/home-manager/{home,flake}.nix
  home-manager.users.pratham = { lib, pkgs, ... }: {
    home.stateVersion = "${NixOSRelease}";


  };



  # {{ configuration options related to Nix and NixOS }}
  nix = {
    gc = {
      automatic = true;
      dates = "*-*-* 23:00:00"; # everyday, at 23:00
      options = "--delete-older-than 14d";
    };

    settings = {
      auto-optimise-store = true;
      experimental-features = [ "nix-command" "flakes" ];
      keep-going = false;
      log-lines = 9999;
      sandbox = true;
      show-trace = true;
      trusted-users = [ "root" "pratham" ];
    };
  };

  system = {
    stateVersion = "${NixOSRelease}"; # release version of NixOS
    # TODO: after adding `ubootRaspberryPi_64bit` to nixpkgs
    # also remove: `scripts/{get-raspi-4-firmware,raspberry-pi-partitions}.sh`
    #build.separateActivationScript = "${whatIGetForSupportingTheRaspberryPiFoundation}/bin/populate-boot-for-raspberry-pi";

  };

  # {{ networking section }}

  # {{ misc }}

  # {{ virtualisation and container settings }}


  hardware.enableRedistributableFirmware = true;
}
